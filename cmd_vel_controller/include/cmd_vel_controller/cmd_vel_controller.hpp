// Copyright 2025 Aarav Gupta
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef CMD_VEL_CONTROLLER__CMD_VEL_CONTROLLER_HPP_
#define CMD_VEL_CONTROLLER__CMD_VEL_CONTROLLER_HPP_

#include <memory>
#include <vector>

#include "control_toolbox/rate_limiter.hpp"
#include "controller_interface/chainable_controller_interface.hpp"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "realtime_tools/realtime_publisher.hpp"
#include "realtime_tools/realtime_thread_safe_box.hpp"

// auto-generated by generate_parameter_library
#include "cmd_vel_controller/cmd_vel_controller_parameters.hpp"

namespace cmd_vel_controller
{
class CmdVelController : public controller_interface::ChainableControllerInterface
{
  using TwistStamped = geometry_msgs::msg::TwistStamped;

public:
  CmdVelController();

  controller_interface::CallbackReturn on_init() override;

  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::return_type update_reference_from_subscribers(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  controller_interface::return_type update_and_write_commands(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  controller_interface::CallbackReturn on_cleanup(
    const rclcpp_lifecycle::State & previous_state) override;

  controller_interface::CallbackReturn on_error(
    const rclcpp_lifecycle::State & previous_state) override;

protected:
  std::vector<hardware_interface::CommandInterface> on_export_reference_interfaces() override;

  // Parameters from ROS for cmd_vel_controller
  std::shared_ptr<ParamListener> param_listener_;
  Params params_;

  // Timeout to consider cmd_vel commands old
  rclcpp::Duration cmd_vel_timeout_ = rclcpp::Duration::from_seconds(0.5);

  bool subscriber_is_active_ = false;
  rclcpp::Subscription<TwistStamped>::SharedPtr velocity_command_subscriber_ = nullptr;
  // Realtime container to exchange the reference from subscriber
  realtime_tools::RealtimeThreadSafeBox<TwistStamped> received_velocity_msg_;
  // Save the last reference in case of unable to get value from box
  TwistStamped received_command_msg_;

  std::vector<control_toolbox::RateLimiter<double>> velocity_limiters_;
  std::queue<std::vector<double>> previous_two_commands_;

  std::shared_ptr<rclcpp::Publisher<TwistStamped>> cmd_vel_publisher_ = nullptr;
  std::shared_ptr<realtime_tools::RealtimePublisher<TwistStamped>> realtime_cmd_vel_publisher_;
  TwistStamped cmd_vel_msg_;

  bool on_set_chained_mode(bool chained_mode) override;
  bool reset();

private:
  void reset_buffers();
};
}  // namespace cmd_vel_controller

#endif  // CMD_VEL_CONTROLLER__CMD_VEL_CONTROLLER_HPP_
