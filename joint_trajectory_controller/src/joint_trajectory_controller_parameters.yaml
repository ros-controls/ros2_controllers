joint_trajectory_controller:
  joints: {
    type: string_array,
    default_value: [],
    description: "Names of joints used by the controller",
    validation: {
      unique<>: null,
    } 
  }
  command_interfaces: {
    type: string_array,
    default_value: [],
    description: "Names of command interfaces to claim",
    validation: {
      unique<>: null,
      subset_of<>: [["position", "velocity", "acceleration", "effort",]],
      command_interface_type_combinations: null,
    }
  }
  state_interfaces: {
    type: string_array,
    default_value: [],
    description: "Names of state interfaces to claim",
    validation: {
      unique<>: null,
      subset_of<>: [["position", "velocity", "acceleration",]],
      state_interface_type_combinations: null,
    }
  }
  allow_partial_joints_goal: {
    type: bool,
    default_value: false,
    description: "Goals with partial set of joints are allowed",
  }
  open_loop_control: {
    type: bool,
    default_value: false,
    description: "Run the controller in open-loop, i.e., read hardware states only when starting controller. This is useful when robot is not exactly following the commanded trajectory.",
  }
  allow_integration_in_goal_trajectories: {
    type: bool,
    default_value: false,
    description: "Allow integration in goal trajectories to accept goals without position or velocity specified",
  }
  state_publish_rate: {
    type: double,
    default_value: 50.0,
    description: "Rate controller state is published",
    validation: {
      lower_bounds: [0.1]
    }
  }
  action_monitor_rate: {
    type: double,
    default_value: 20.0,
    description: "Rate status changes will be monitored",
    validation: {
      lower_bounds: [0.1]
    }
  }
  interpolation_method: {
    type: string,
    default_value: "splines",
    description: "The type of interpolation to use, if any",
    validation: {
      one_of<>: [["splines", "none"]],
    }
  }
  gains:
    __map_joints:
      p: {
        type: double,
        default_value: 0.0,
        description: "Proportional gain for PID"
      }
      i: {
        type: double,
        default_value: 0.0,
        description: "Intigral gain for PID"
      }
      d: {
        type: double,
        default_value: 0.0,
        description: "Derivative gain for PID"
      }
      i_clamp: {
        type: double,
        default_value: 0.0,
        description: "Intigral clamp"
      }
  constraints:
    stopped_velocity_tolerance: {
      type: double,
      default_value: 0.01,
    }
    goal_time: {
      type: double,
      default_value: 0.0,
      validation: {
        lower_bounds: [0.0],
      }
    }
    __map_joints:
      trajectory: {
        type: double,
        default_value: 0.0,
      }
      goal: {
        type: double,
        default_value: 0.0,
      }
