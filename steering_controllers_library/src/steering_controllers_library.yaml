steering_controllers_library:
  reference_timeout: {
    type: double,
    default_value: 1.0,
    description: "Timeout for controller references after which they will be reset. This is especially useful for controllers that can cause unwanted and dangerous behavior if reference is not reset, e.g., velocity controllers. If value is 0 the reference is reset after each run.",
  }

  front_steering: {
    type: bool,
    read_only: true,
    default_value: true,
    description: "DEPRECATED: Use 'traction_joints_names' or 'steering_joints_names' instead"
  }

  rear_wheels_names: {
    type: string_array,
    description: "DEPRECATED: Use 'traction_joints_names' or 'steering_joints_names' instead",
    read_only: true,
    default_value: [],
    validation: {
      size_lt<>: [5],
      unique<>: null,
    }
  }

  traction_joints_names: {
    type: string_array,
    description: "Names of traction wheel joints. For kinematic configurations with two traction joints, the expected order is: right joint, left joint.",
    default_value: [],
    read_only: true,
    validation: {
      size_lt<>: [5],
      unique<>: null,
      # TODO(anyone): activate validation if front/rear wheel radius is removed
      # not_empty<>: null,
    }
  }

  front_wheels_names: {
    type: string_array,
    description: "DEPRECATED: Use 'traction_joints_names' or 'steering_joints_names'' instead",
    read_only: true,
    default_value: [],
    validation: {
      size_lt<>: [5],
      unique<>: null,
    }
  }

  steering_joints_names: {
    type: string_array,
    description: "Names of steering joints. For kinematic configurations with two steering joints, the expected order is: right joint, left joint. The orientation of the steering axes is expected as such: When positive steering position value is commanded, then the robot should turn in positive direction of the z-axis of the vehicle (see REP-103).",
    default_value: [],
    read_only: true,
    validation: {
      size_lt<>: [5],
      unique<>: null,
      # TODO(anyone): activate validation if front/rear wheel radius is removed
      # not_empty<>: null,
    }
  }

  traction_joints_state_names: {
    type: string_array,
    description: "(Optional) Names of tractions joints to read states from. If not set joint names from 'traction_joints_names' will be used.",
    default_value: [],
    read_only: true,
    validation: {
      size_lt<>: [5],
      unique<>: null,
    }
  }

  rear_wheels_state_names: {
    type: string_array,
    description: "DEPRECATED: Use 'traction_joints_state_names' or 'steering_joints_state_names' instead",
    default_value: [],
    read_only: true,
    validation: {
      size_lt<>: [5],
      unique<>: null,
    }
  }

  steering_joints_state_names: {
    type: string_array,
    description: "(Optional) Names of steering joints to read states from. If not set joint names from 'steering_joints_names' will be used.",
    default_value: [],
    read_only: true,
    validation: {
      size_lt<>: [5],
      unique<>: null,
    }
  }

  front_wheels_state_names: {
    type: string_array,
    description: "DEPRECATED: Use 'traction_joints_state_names' or 'steering_joints_state_names' instead",
    default_value: [],
    read_only: true,
    validation: {
      size_lt<>: [5],
      unique<>: null,
    }
  }

  open_loop: {
    type: bool,
    default_value: false,
    description: "Choose if open-loop or not (feedback) is used for odometry calculation.",
    read_only: false,
  }

  reduce_wheel_speed_until_steering_reached: {
    type: bool,
    default_value: false,
    description: "Reduce wheel speed until the steering angle has been reached.",
    read_only: false,
  }

  velocity_rolling_window_size: {
    type: int,
    default_value: 10,
    description: "The number of velocity samples to average together to compute the odometry twist.linear.x and twist.angular.z velocities.",
    read_only: false,
  }

  base_frame_id: {
    type: string,
    default_value: "base_link",
    description: "Base frame_id set to value of base_frame_id.",
    read_only: false,
  }

  odom_frame_id: {
    type: string,
    default_value: "odom",
    description: "Odometry frame_id set to value of odom_frame_id.",
    read_only: false,
  }

  enable_odom_tf: {
    type: bool,
    default_value: true,
    description: "Publishing to tf is enabled or disabled?",
    read_only: false,
  }

  twist_covariance_diagonal: {
    type: double_array,
    default_value: [0.0, 7.0, 14.0, 21.0, 28.0, 35.0],
    description: "diagonal values of twist covariance matrix.",
    read_only: false,
  }

  pose_covariance_diagonal: {
    type: double_array,
    default_value: [0.0, 7.0, 14.0, 21.0, 28.0, 35.0],
    description: "diagonal values of pose covariance matrix.",
    read_only: false,
  }

  position_feedback: {
    type: bool,
    default_value: false,
    description: "Choice of feedback type, if position_feedback is false then ``HW_IF_VELOCITY`` is taken as interface type, if
    position_feedback is true then ``HW_IF_POSITION`` is taken as interface type",
    read_only: false,
  }
