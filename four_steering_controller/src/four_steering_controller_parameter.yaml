four_steering_controller:
  wheel_names: {
    type: string_array,
    default_value: [],
    description: "Link names of the wheel joints.",
  }
  steer_names: {
    type: string_array,
    default_value: [],
    description: "Link names of the steer joints.",
  }
  wheel_steering_y_offset_: {
    type: double,
    default_value: 0.15,
    description: "Distance from mid-point of the wheel width and the associated steer joint.",
  }
  wheel_radius_: {
    type: double,
    default_value: 1.0,
    description: "Radius of a wheel.",
  }
  wheel_base_: {
    type: double,
    default_value: 1.0,
    description: "Distance between fron and rear wheels.",
  }
  track_: {
    type: double,
    default_value: 1.0,
    description: "Distance between right and left wheels. (Mid-point of the wheel width).",
  }
  position_feedback: {
    type: bool,
    default_value: true,
    description: "Is there position feedback from hardware.",
  }
  cmd_vel_timeout: {
    type: double,
    default_value: 0.5, # Seconds
    description: "Timeout on cmd_vel command.",
  }  
  publish_rate: {
    type: double,
    default_value: 50.0, # Hz
    description: "Publishing rate (Hz) of the odometry and TF messages.",
  }
  wheels_per_side: {
    type: int,
    default_value: 2,
    description: "Number of wheels on each wide of the robot. This is important to take the wheels slip into account when multiple wheels on each side are present. If there are more wheels then control signals for each side, you should enter number or control signals. For example, Husky has two wheels on each side, but they use one control signal, in this case '1' is the correct value of the parameter.",
  }
  open_loop: {
    type: bool,
    default_value: false,
    description: "If set to false the odometry of the robot will be calculated from the commanded values and not from feedback.",
  }
  odom_frame_id: {
    type: string,
    default_value: "odom",
    description:  "Name of the frame for odometry. This frame is parent of ``base_frame_id`` when controller publishes odometry.",
  }
  base_frame_id: {
    type: string,
    default_value: "base_link",
    description: "Name of the robot's base frame that is child of the odometry frame.",
  }
  pose_covariance_diagonal: {
    type: double_array,
    default_value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    description: "Odometry covariance for the encoder output of the robot for the pose. These values should be tuned to your robot's sample odometry data, but these values are a good place to start: ``[0.001, 0.001, 0.001, 0.001, 0.001, 0.01]``.",
  }
  twist_covariance_diagonal: {
    type: double_array,
    default_value: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
    description: "Odometry covariance for the encoder output of the robot for the speed. These values should be tuned to your robot's sample odometry data, but these values are a good place to start: ``[0.001, 0.001, 0.001, 0.001, 0.001, 0.01]``.",
  }
  enable_odom_tf: {
    type: bool,
    default_value: true,
    description: "Publish transformation between ``odom_frame_id`` and ``base_frame_id``.",
  }
  position_feedback: {
    type: bool,
    default_value: true,
    description: "Is there position feedback from hardware.",
  }
  velocity_rolling_window_size: {
    type: int,
    default_value: 10,
    description: "Size of the rolling window for calculation of mean velocity use in odometry.",
  }
  use_stamped_cmd_: {
    type: bool,
    default_value: true,
    description: "If the command messages are stamped or not.",
  }
  enable_twist_cmd_: {
    type: bool,
    default_value: false,
    description: "Choose which types of command to use ''twist'' or ''4ws_steering''.",
  }